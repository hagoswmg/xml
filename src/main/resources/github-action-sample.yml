name: Main CI/CD

on:
  pull_request:
    branches:
      - development
      - qa
      - staging
      - master
  push:
    branches:
      - development
      - qa
      - staging
      - master

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setvars.outputs.branch_name }}
    steps:
      - name: Set branch name
        id: setvars
        run: echo "::set-output name=branch_name::${GITHUB_REF##*/}"
  build_and_deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: init
    environment:
      name: ${{github.base_ref || needs.init.outputs.branch_name}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: test
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      APPLICATION_NAME: ${{ secrets.APPLICATION_NAME }}
      APPLICATION_ENVIRONMENT: ${{ secrets.APPLICATION_ENVIRONMENT }}
      AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EC2_KEY_PAIR: ${{ secrets.EC2_KEY_PAIR }}
      ELB_SUBNET: ${{ secrets.ELB_SUBNET }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_FILES_BUCKET: ${{ secrets.S3_FILES_BUCKET }}
      S3_FILES_REGION: ${{ secrets.S3_FILES_REGION }}
      S3_PROFILE: ${{ secrets.S3_PROFILE }}
      SECURITY_GROUP: ${{ secrets.SECURITY_GROUP }}
      SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
      SSL_CERTIFICATE_ID: ${{ secrets.SSL_CERTIFICATE_ID }}
      VPC_ID: ${{ secrets.VPC_ID }}
      VPC_SUBNETS: ${{ secrets.VPC_SUBNETS }}
      OKTA_ISSUER: ${{ secrets.OKTA_ISSUER }}
      OKTA_CLIENT_ID: ${{ secrets.OKTA_CLIENT_ID }}
      OMS_OKTA_ISSUER: ${{ secrets.OMS_OKTA_ISSUER }}
      OMS_OKTA_CLIENT_ID: ${{ secrets.OMS_OKTA_CLIENT_ID }}
      OMS_OKTA_CLIENT_SECRET: ${{ secrets.OMS_OKTA_CLIENT_SECRET }}
      OMS_URL: ${{ secrets.OMS_URL }}
    steps:
      - uses: actions/checkout@v2
      - name: Print environment
        run: echo ${{github.base_ref || needs.init.outputs.branch_name}}
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Test
        run: mvn test -P test
      - name: Configure AWS Credentials
        if: ${{  github.event_name == 'push' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build with Maven
        run: mvn clean package -DskipTests -P $SPRING_PROFILE && cp target/mdt-api-0.0.1-SNAPSHOT.jar src/main/docker && cp -R mdt-tools src/main/docker
      - name: Create Zip File
        if: ${{  github.event_name == 'push' }}
        uses: vimtor/action-zip@v1
        with:
          files: src/main/docker/
          recursive: true
          dest: mdt-api-0.0.1-SNAPSHOT.zip
      - name: Set up Python v3.8
        if: ${{  github.event_name == 'push' }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python Dependencies
        if: ${{  github.event_name == 'push' }}
        run: pip install -r requirements/local.txt
      - name: Deployment
        if: ${{  github.event_name == 'push' }}
        run: python scripts/deployment.py